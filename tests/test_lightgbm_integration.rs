/// Tests for LightGBM integration
use ndarray::array;
use treerite::{GTIConfig, Model};

#[test]
fn test_lightgbm() {
    const MODEL: &'static str =   "tree\nversion=v4\nnum_class=1\nnum_tree_per_iteration=1\nlabel_index=0\nmax_feature_idx=1\nobjective=binary sigmoid:1\nfeature_names=Column_0 Column_1\nfeature_infos=[0:100] [0:100]\ntree_sizes=452 551 550\n\nTree=0\nnum_leaves=3\nnum_cat=0\nsplit_feature=1 0\nsplit_gain=1000 1.13687e-13\nthreshold=50.500000000000007 81.500000000000014\ndecision_type=2 2\nleft_child=1 -1\nright_child=-2 -3\nleaf_value=-0.26508131545217944 0.1354377507657662 -0.26508131545217944\nleaf_weight=104.11489368975163 120.34383395314217 25.217276409268379\nleaf_count=417 482 101\ninternal_value=-0.0720311 -0.265081\ninternal_weight=0 129.332\ninternal_count=1000 518\nis_linear=0\nshrinkage=1\n\n\nTree=1\nnum_leaves=4\nnum_cat=0\nsplit_feature=1 0 0\nsplit_gain=818.327 5.68434e-14 5.68434e-14\nthreshold=50.500000000000007 94.500000000000014 79.500000000000014\ndecision_type=2 2 2\nleft_child=1 -1 -2\nright_child=2 -3 -4\nleaf_value=-0.17671435507222288 0.18733334718520323 -0.17671435507222288 0.18733334718520323\nleaf_weight=120.12733536958694 97.551958203315735 7.1241160035133353 22.397133260965347\nleaf_count=489 392 29 90\ninternal_value=0 -0.176714 0.187333\ninternal_weight=0 127.251 119.949\ninternal_count=1000 518 482\nis_linear=0\nshrinkage=0.1\n\n\nTree=2\nnum_leaves=4\nnum_cat=0\nsplit_feature=1 0 0\nsplit_gain=682.047 5.68434e-14 5.68434e-14\nthreshold=50.500000000000007 2.5000000000000004 93.500000000000014\ndecision_type=2 2 2\nleft_child=1 -1 -2\nright_child=2 -3 -4\nleaf_value=-0.16428808935872824 0.17241395974057552 -0.16428808935872824 0.17241395974057552\nleaf_weight=5.4783051162958136 110.35083867609501 117.9026535898447 7.0644024759531012\nleaf_count=23 453 495 29\ninternal_value=0 -0.164288 0.172414\ninternal_weight=0 123.381 117.415\ninternal_count=1000 518 482\nis_linear=0\nshrinkage=0.1\n\n\nend of trees\n\nfeature_importances:\nColumn_0=5\nColumn_1=3\n\nparameters:\n[boosting: gbdt]\n[objective: binary]\n[metric: binary_logloss]\n[tree_learner: serial]\n[device_type: cpu]\n[data_sample_strategy: bagging]\n[data: ]\n[valid: ]\n[num_iterations: 3]\n[learning_rate: 0.1]\n[num_leaves: 31]\n[num_threads: 16]\n[seed: 0]\n[deterministic: 0]\n[force_col_wise: 0]\n[force_row_wise: 0]\n[histogram_pool_size: -1]\n[max_depth: 2]\n[min_data_in_leaf: 20]\n[min_sum_hessian_in_leaf: 0.001]\n[bagging_fraction: 1]\n[pos_bagging_fraction: 1]\n[neg_bagging_fraction: 1]\n[bagging_freq: 0]\n[bagging_seed: 3]\n[feature_fraction: 1]\n[feature_fraction_bynode: 1]\n[feature_fraction_seed: 2]\n[extra_trees: 0]\n[extra_seed: 6]\n[early_stopping_round: 0]\n[early_stopping_min_delta: 0]\n[first_metric_only: 0]\n[max_delta_step: 0]\n[lambda_l1: 0]\n[lambda_l2: 0]\n[linear_lambda: 0]\n[min_gain_to_split: 0]\n[drop_rate: 0.1]\n[max_drop: 50]\n[skip_drop: 0.5]\n[xgboost_dart_mode: 0]\n[uniform_drop: 0]\n[drop_seed: 4]\n[top_rate: 0.2]\n[other_rate: 0.1]\n[min_data_per_group: 100]\n[max_cat_threshold: 32]\n[cat_l2: 10]\n[cat_smooth: 10]\n[max_cat_to_onehot: 4]\n[top_k: 20]\n[monotone_constraints: ]\n[monotone_constraints_method: basic]\n[monotone_penalty: 0]\n[feature_contri: ]\n[forcedsplits_filename: ]\n[refit_decay_rate: 0.9]\n[cegb_tradeoff: 1]\n[cegb_penalty_split: 0]\n[cegb_penalty_feature_lazy: ]\n[cegb_penalty_feature_coupled: ]\n[path_smooth: 0]\n[interaction_constraints: ]\n[verbosity: 1]\n[saved_feature_importance_type: 0]\n[use_quantized_grad: 0]\n[num_grad_quant_bins: 4]\n[quant_train_renew_leaf: 0]\n[stochastic_rounding: 1]\n[linear_tree: 0]\n[max_bin: 255]\n[max_bin_by_feature: ]\n[min_data_in_bin: 3]\n[bin_construct_sample_cnt: 200000]\n[data_random_seed: 1]\n[is_enable_sparse: 1]\n[enable_bundle: 1]\n[use_missing: 1]\n[zero_as_missing: 0]\n[feature_pre_filter: 1]\n[pre_partition: 0]\n[two_round: 0]\n[header: 0]\n[label_column: ]\n[weight_column: ]\n[group_column: ]\n[ignore_column: ]\n[categorical_feature: ]\n[forcedbins_filename: ]\n[precise_float_parser: 0]\n[parser_config_file: ]\n[objective_seed: 5]\n[num_class: 1]\n[is_unbalance: 0]\n[scale_pos_weight: 1]\n[sigmoid: 1]\n[boost_from_average: 1]\n[reg_sqrt: 0]\n[alpha: 0.9]\n[fair_c: 1]\n[poisson_max_delta_step: 0.7]\n[tweedie_variance_power: 1.5]\n[lambdarank_truncation_level: 30]\n[lambdarank_norm: 1]\n[label_gain: ]\n[lambdarank_position_bias_regularization: 0]\n[eval_at: ]\n[multi_error_top_k: 1]\n[auc_mu_weights: ]\n[num_machines: 1]\n[local_listen_port: 12400]\n[time_out: 120]\n[machine_list_filename: ]\n[machines: ]\n[gpu_platform_id: -1]\n[gpu_device_id: -1]\n[gpu_use_dp: 0]\n[num_gpu: 1]\n\nend of parameters\n\npandas_categorical:null\n";

    let gti_config = GTIConfig::parse(
        r#"{
          "predict_type": "default",
          "nthread": 1
        }"#,
    )
    .unwrap();
    let model = Model::load_lightgbm_string(MODEL, "{}").unwrap();
    let input = array![[1., 49.], [2., 51.]];
    let out = model.predict(&gti_config, input.view()).unwrap();
    assert_eq!(
        array![0.3529530619710812, 0.6213271364915073],
        out.flatten()
    );
}
